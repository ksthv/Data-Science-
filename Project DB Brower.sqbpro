<?xml version="1.0" encoding="UTF-8"?><sqlb_project><db path="C:/Users/kirti/Downloads/New Orders.db" readonly="0" foreign_keys="1" case_sensitive_like="0" temp_store="0" wal_autocheckpoint="1000" synchronous="2"/><attached/><window><main_tabs open="structure browser pragmas query" current="3"/></window><tab_structure><column_width id="0" width="300"/><column_width id="1" width="0"/><column_width id="2" width="100"/><column_width id="3" width="1901"/><column_width id="4" width="0"/><expanded_item id="0" parent="1"/><expanded_item id="1" parent="1"/><expanded_item id="2" parent="1"/><expanded_item id="3" parent="1"/></tab_structure><tab_browse><current_table name="4,7:mainADDRESS"/><default_encoding codec=""/><browse_table_settings><table schema="main" name="ADDRESS" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort><column index="1" mode="0"/></sort><column_widths><column index="1" value="90"/><column index="2" value="300"/><column index="3" value="261"/><column index="4" value="111"/><column index="5" value="98"/><column index="6" value="62"/><column index="7" value="66"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="PRODUCT" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort><column index="2" mode="1"/></sort><column_widths><column index="1" value="88"/><column index="2" value="300"/><column index="3" value="156"/><column index="4" value="111"/><column index="5" value="186"/><column index="6" value="40"/><column index="7" value="51"/><column index="8" value="53"/><column index="9" value="57"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="PRODUCT_CLASS" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="156"/><column index="2" value="155"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table></browse_table_settings></tab_browse><tab_sql><sql name="SQL 1">--Query to Display the product details as per the criteria.
SELECT PRODUCT_CLASS_CODE AS 'Product Code',
PRODUCT_ID AS 'Product ID',
PRODUCT_DESC AS 'Product Description',
PRODUCT_PRICE AS 'Actual Price',
CASE PRODUCT_CLASS_CODE
WHEN 2050 THEN PRODUCT_PRICE+2000 
WHEN 2051 THEN PRODUCT_PRICE+500 
WHEN 2052 THEN PRODUCT_PRICE+600 
ELSE PRODUCT_PRICE
END AS 'Computed Price'
FROM PRODUCT
-- Decending order by Product Class Code
ORDER BY PRODUCT_CLASS_CODE DESC;


--Query to Display Inventory Status of Products 
SELECT PC.PRODUCT_CLASS_DESC AS 'Product Code',
P.PRODUCT_ID AS 'Product ID',
P.PRODUCT_DESC AS 'Product Description',
P.PRODUCT_QUANTITY_AVAIL AS 'Quantity Available',
CASE
-- Electronics(2050) and Computer (2053)
WHEN PC.PRODUCT_CLASS_CODE IN (2050,2053) THEN
CASE
WHEN P.PRODUCT_QUANTITY_AVAIL =0 THEN 'Out of stock' 
WHEN P.PRODUCT_QUANTITY_AVAIL &lt;=10 THEN 'Low stock'
WHEN P.PRODUCT_QUANTITY_AVAIL &gt;=11 AND P.PRODUCT_QUANTITY_AVAIL &lt;=30 THEN 'In stock'
WHEN P.PRODUCT_QUANTITY_AVAIL &gt;=31 THEN 'Enough stock'
END
-- Stationery(2052) and Clothes(2056)
WHEN PC.PRODUCT_CLASS_CODE IN (2052,2056) THEN
CASE
WHEN P.PRODUCT_QUANTITY_AVAIL =0 THEN 'Out of stock' 
WHEN P.PRODUCT_QUANTITY_AVAIL &lt;=20 THEN 'Low stock'
WHEN P.PRODUCT_QUANTITY_AVAIL &gt;=21 AND P.PRODUCT_QUANTITY_AVAIL &lt;=80 THEN 'In stock'
WHEN P.PRODUCT_QUANTITY_AVAIL &gt;=81 THEN 'Enough stock'
END

ELSE
CASE
WHEN P.PRODUCT_QUANTITY_AVAIL =0 THEN 'Out of stock' 
WHEN P.PRODUCT_QUANTITY_AVAIL &lt;=15 THEN 'Low stock'
WHEN P.PRODUCT_QUANTITY_AVAIL &gt;=16 AND P.PRODUCT_QUANTITY_AVAIL &lt;=50 THEN 'In stock'
WHEN P.PRODUCT_QUANTITY_AVAIL &gt;=51 THEN 'Enough stock'
END
END AS 'Inventory Status'
FROM PRODUCT P

INNER JOIN PRODUCT_CLASS PC ON P.PRODUCT_CLASS_CODE = PC.PRODUCT_CLASS_CODE

ORDER BY P.PRODUCT_QUANTITY_AVAIL ASC;


--Query to Show the Count of Cities in all Countries other than USA &amp; MALAYSIA
SELECT COUNT(CITY) AS Number_of_Cities,
COUNTRY AS Country
FROM ADDRESS
GROUP BY COUNTRY
HAVING COUNTRY NOT IN ('USA','Malaysia') AND COUNT(CITY) &gt; 1
ORDER BY Number_of_Cities DESC;


-- Query to Display the Customer Details
SELECT OC.CUSTOMER_ID AS 'Customer ID',
OC.CUSTOMER_FNAME || ' ' || OC.CUSTOMER_LNAME AS 'Customer Full Name' ,
A.CITY AS 'City',
A.PINCODE AS 'Pin Code',
OH.ORDER_ID AS 'Order ID',
PC.PRODUCT_CLASS_DESC AS 'Product Class Description',
P.PRODUCT_DESC AS 'Product Description',
P.PRODUCT_PRICE AS 'Product Price',
OI.PRODUCT_QUANTITY AS 'Order Quantity',
(P.PRODUCT_PRICE * OI.PRODUCT_QUANTITY) AS Sub_Total 
FROM
ONLINE_CUSTOMER OC
INNER JOIN ADDRESS A ON OC.ADDRESS_ID = A.ADDRESS_ID
INNER JOIN ORDER_HEADER OH ON OH.CUSTOMER_ID = OC.CUSTOMER_ID
INNER JOIN ORDER_ITEMS OI ON OI.ORDER_ID = OH.ORDER_ID 
INNER JOIN PRODUCT P ON P.PRODUCT_ID = OI.PRODUCT_ID 
INNER JOIN PRODUCT_CLASS PC ON PC.PRODUCT_CLASS_CODE = P.PRODUCT_CLASS_CODE 


WHERE OH.ORDER_STATUS='Shipped' AND A.PINCODE NOT LIKE '%0%'

ORDER BY OC.CUSTOMER_FNAME, Sub_Total;


-- Query to Display item which has been bought maximum no. of times along with product id 201. 
SELECT OI.PRODUCT_ID AS Product_ID, 
P.PRODUCT_DESC AS Product_Description, 
SUM(OI.PRODUCT_QUANTITY) AS Total_Quantity 

FROM ORDER_ITEMS OI
INNER JOIN PRODUCT P ON P.PRODUCT_ID = OI.PRODUCT_ID 
WHERE OI.ORDER_ID IN

(SELECT DISTINCT
ORDER_ID
FROM
ORDER_ITEMS 
WHERE
PRODUCT_ID = 201)

AND OI.PRODUCT_ID &lt;&gt; 201
GROUP BY OI.PRODUCT_ID
ORDER BY Total_Quantity DESC LIMIT 1; 
 
 
 -- Query to Display the Customers even if they have not ordered any item.
 SELECT
OC.CUSTOMER_ID AS Customer_ID,
(OC.CUSTOMER_FNAME ||''|| OC.CUSTOMER_LNAME) AS Customer_Full_Name,
OC.CUSTOMER_EMAIL AS Customer_Email,
O.ORDER_ID AS Order_ID,
P.PRODUCT_DESC AS Product_Description,
OI.PRODUCT_QUANTITY AS Order_Quantity,
P.PRODUCT_PRICE AS Product_Price,
(OI.PRODUCT_QUANTITY*P.PRODUCT_PRICE) AS Sub_Total 
FROM
ONLINE_CUSTOMER OC
LEFT JOIN ORDER_HEADER O ON OC.CUSTOMER_ID = O.CUSTOMER_ID 
LEFT JOIN ORDER_ITEMS OI ON O.ORDER_ID = OI.ORDER_ID 
LEFT JOIN PRODUCT P ON OI.PRODUCT_ID = P.PRODUCT_ID 
ORDER BY Order_Quantity ASC;
</sql><current_tab id="0"/></tab_sql></sqlb_project>
